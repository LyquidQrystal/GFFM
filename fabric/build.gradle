plugins {
    id 'com.github.johnrengelman.shadow'
    id 'dev.architectury.loom'
}

architectury {
    platformSetupLoomIde()
    fabric()
}
loom {
    enableTransitiveAccessWideners.set(true)
}
configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"
    modApi("dev.architectury:architectury-fabric:${project.properties["architectury_version"]}")

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')
    modApi("me.shedaniel.cloth:cloth-config-fabric:${project.properties["cloth_config_lib_version"]}")
    modApi("com.cobblemon:fabric:${project.properties["cobblemon_version"]}")
    modImplementation("net.conczin:immersive_melodies:${project.properties["immersive_melodies_version"]}+fabric")
}

processResources {
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
