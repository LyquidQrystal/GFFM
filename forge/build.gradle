plugins {
    id 'com.github.johnrengelman.shadow'
    id 'dev.architectury.loom'
    id 'architectury-plugin'
}

loom {
    enableTransitiveAccessWideners.set(true)

    forge {
        convertAccessWideners.set(true)
        mixinConfig "gain_friendship_from_melodies.mixins.json"
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    forge "net.minecraftforge:forge:$rootProject.forge_version"
    modApi("dev.architectury:architectury-forge:${project.properties["architectury_version"]}")
    modApi("me.shedaniel.cloth:cloth-config-forge:${project.properties["cloth_config_lib_version"]}")

    runtimeOnly("maven.modrinth:ordsPcFz:CZYJI3gh") //kotlinforforge
    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionForge')
    modImplementation("net.conczin:immersive_melodies:${project.properties["immersive_melodies_version"]}+forge")
    modImplementation("com.cobblemon:forge:${project.properties["cobblemon_version"]}")
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
